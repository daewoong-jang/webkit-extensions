/*
 * Copyright (C) 2016 Naver Corp. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

interface Tabs {
    void get(double tabId, JSFunction callback);
    void getCurrent(JSFunction callback);
    void connect(double tabId, JSDictionary connectInfo);
    void sendRequest(double tabId, JSDictionary request, JSFunction responseCallback);
    void sendMessage(double tabId, JSDictionary message, JSDictionary options, JSFunction responseCallback);
    void getSelected(double windowId, JSFunction callback);
    void getAllInWindow(double windowId, JSFunction callback);
    void create(JSDictionary createProperties, JSFunction callback);
    void duplicate(double tabId, JSFunction callback);
    void query(JSDictionary queryInfo, JSFunction callback);
    void highlight(JSDictionary highlightInfo, JSFunction callback);
    void update(double tabId, JSDictionary updateProperties, JSFunction callback);
    void move(JSArray tabIds, JSDictionary moveProperties, JSFunction callback);
    void reload(double tabId, JSDictionary reloadProperties, JSFunction callback);
    void remove(JSArray tabIds, JSFunction callback);
    void detectLanguage(JSArray tabIds, JSFunction callback);
    void captureVisibleTab(double windowId, JSDictionary options, JSFunction callback);
    void executeScript(double tabId, JSDictionary details, JSFunction callback);
    void insertCSS(double tabId, JSDictionary details, JSFunction callback);
    void setZoom(double tabId, double zoomFactor, JSFunction callback);
    void getZoom(double tabId, JSFunction callback);
};
